import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.weights_input_hidden = np.random.randn(self.input_size, self.hidden_size)
        self.biases_input_hidden = np.zeros((1, self.hidden_size))
        self.weights_hidden_output = np.random.randn(self.hidden_size, self.output_size)
        self.biases_hidden_output = np.zeros((1, self.output_size))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def softmax(self, x):
        exp_values = np.exp(x - np.max(x, axis=1, keepdims=True))
        return exp_values / np.sum(exp_values, axis=1, keepdims=True)

    def forward(self, X):
        # Input layer to hidden layer
        self.hidden_output = self.sigmoid(np.dot(X, self.weights_input_hidden) + self.biases_input_hidden)
        
        # Hidden layer to output layer
        self.output = self.softmax(np.dot(self.hidden_output, self.weights_hidden_output) + self.biases_hidden_output)
        return self.output

# Example usage:
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Input
y = np.array([[1, 0], [0, 1], [0, 1], [1, 0]])  # Output (one-hot encoded)

input_size = X.shape[1]
hidden_size = 3
output_size = y.shape[1]

# Create a feedforward neural network
model = NeuralNetwork(input_size, hidden_size, output_size)

# Forward pass
output = model.forward(X)
print("Output:")
print(output)
OUTPUT:
Output:
[[0.66078516 0.33921484]
 [0.62960292 0.37039708]
 [0.671479   0.328521  ]
 [0.64847456 0.35152544]]
> 
