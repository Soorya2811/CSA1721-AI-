from collections import deque

# Function to represent state of the jugs
class State:
    def __init__(self, jug1, jug2):
        self.jug1 = jug1
        self.jug2 = jug2

    def __eq__(self, other):
        return self.jug1 == other.jug1 and self.jug2 == other.jug2

    def __hash__(self):
        return hash((self.jug1, self.jug2))

# Function to find all possible next states
def next_states(state, capacity1, capacity2):
    jug1, jug2 = state.jug1, state.jug2
    return [
        State(0, jug2),                              # Empty jug1
        State(jug1, 0),                              # Empty jug2
        State(capacity1, jug2),                      # Fill jug1
        State(jug1, capacity2),                      # Fill jug2
        State(min(jug1 + jug2, capacity1), max(0, jug1 + jug2 - capacity1)),   # Pour jug2 into jug1
        State(max(0, jug1 + jug2 - capacity2), min(jug1 + jug2, capacity2))    # Pour jug1 into jug2
    ]

# Function to solve the Water Jug problem using BFS
def water_jug_bfs(capacity1, capacity2, target):
    start_state = State(0, 0)
    visited = set()
    queue = deque([start_state])

    while queue:
        current_state = queue.popleft()

        if current_state.jug1 == target or current_state.jug2 == target:
            return True

        visited.add(current_state)

        for next_state in next_states(current_state, capacity1, capacity2):
            if next_state not in visited:
                queue.append(next_state)

    return False

# Example usage
capacity_jug1 = 4
capacity_jug2 = 3
target_water = 2
if water_jug_bfs(capacity_jug1, capacity_jug2, target_water):
    print(f"Water of {target_water} liters can be measured.")
else:
    print(f"Water of {target_water} liters cannot be measured.")
OUTPUT:
 Water of 2 liters can be measured.
